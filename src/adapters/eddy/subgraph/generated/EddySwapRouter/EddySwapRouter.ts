// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class EddySwap extends ethereum.Event {
  get params(): EddySwap__Params {
    return new EddySwap__Params(this);
  }
}

export class EddySwap__Params {
  _event: EddySwap;

  constructor(event: EddySwap) {
    this._event = event;
  }

  get walletAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fees(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get chainId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get aggregator(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get priceOfTokenIn(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EddySwapRouter extends ethereum.SmartContract {
  static bind(address: Address): EddySwapRouter {
    return new EddySwapRouter("EddySwapRouter", address);
  }

  swapEddyExactTokensForEth(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
  ): BigInt {
    let result = super.call(
      "swapEddyExactTokensForEth",
      "swapEddyExactTokensForEth(uint256,uint256,address[],address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
      ],
    );

    return result[0].toBigInt();
  }

  try_swapEddyExactTokensForEth(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapEddyExactTokensForEth",
      "swapEddyExactTokensForEth(uint256,uint256,address[],address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapEddyTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
  ): BigInt {
    let result = super.call(
      "swapEddyTokensForTokens",
      "swapEddyTokensForTokens(uint256,uint256,address[],address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
      ],
    );

    return result[0].toBigInt();
  }

  try_swapEddyTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapEddyTokensForTokens",
      "swapEddyTokensForTokens(uint256,uint256,address[],address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawWETH(amountIn: BigInt): BigInt {
    let result = super.call("withdrawWETH", "withdrawWETH(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountIn),
    ]);

    return result[0].toBigInt();
  }

  try_withdrawWETH(amountIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawWETH",
      "withdrawWETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountIn)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressToAssetLabel(param0: Address): string {
    let result = super.call(
      "addressToAssetLabel",
      "addressToAssetLabel(address):(string)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toString();
  }

  try_addressToAssetLabel(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "addressToAssetLabel",
      "addressToAssetLabel(address):(string)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  aggregateValues(values: Array<BigInt>): BigInt {
    let result = super.call(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)],
    );

    return result[0].toBigInt();
  }

  try_aggregateValues(values: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aggregateValues",
      "aggregateValues(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(values)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aggregatorLabel(): string {
    let result = super.call(
      "aggregatorLabel",
      "aggregatorLabel():(string)",
      [],
    );

    return result[0].toString();
  }

  try_aggregatorLabel(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "aggregatorLabel",
      "aggregatorLabel():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  chainId(): BigInt {
    let result = super.call("chainId", "chainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_chainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("chainId", "chainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extractTimestampsAndAssertAllAreEqual(): BigInt {
    let result = super.call(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_extractTimestampsAndAssertAllAreEqual(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extractTimestampsAndAssertAllAreEqual",
      "extractTimestampsAndAssertAllAreEqual():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuthorisedSignerIndex(signerAddress: Address): i32 {
    let result = super.call(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(signerAddress)],
    );

    return result[0].toI32();
  }

  try_getAuthorisedSignerIndex(
    signerAddress: Address,
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAuthorisedSignerIndex",
      "getAuthorisedSignerIndex(address):(uint8)",
      [ethereum.Value.fromAddress(signerAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDataServiceId(): string {
    let result = super.call(
      "getDataServiceId",
      "getDataServiceId():(string)",
      [],
    );

    return result[0].toString();
  }

  try_getDataServiceId(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getDataServiceId",
      "getDataServiceId():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getUniqueSignersThreshold(): i32 {
    let result = super.call(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_getUniqueSignersThreshold(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getUniqueSignersThreshold",
      "getUniqueSignersThreshold():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  NATIVE_ETH(): Address {
    let result = super.call("NATIVE_ETH", "NATIVE_ETH():(address)", []);

    return result[0].toAddress();
  }

  try_NATIVE_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("NATIVE_ETH", "NATIVE_ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slippage(): BigInt {
    let result = super.call("slippage", "slippage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slippage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slippage", "slippage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositEthForWETHCall extends ethereum.Call {
  get inputs(): DepositEthForWETHCall__Inputs {
    return new DepositEthForWETHCall__Inputs(this);
  }

  get outputs(): DepositEthForWETHCall__Outputs {
    return new DepositEthForWETHCall__Outputs(this);
  }
}

export class DepositEthForWETHCall__Inputs {
  _call: DepositEthForWETHCall;

  constructor(call: DepositEthForWETHCall) {
    this._call = call;
  }
}

export class DepositEthForWETHCall__Outputs {
  _call: DepositEthForWETHCall;

  constructor(call: DepositEthForWETHCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAssetLabelCall extends ethereum.Call {
  get inputs(): SetAssetLabelCall__Inputs {
    return new SetAssetLabelCall__Inputs(this);
  }

  get outputs(): SetAssetLabelCall__Outputs {
    return new SetAssetLabelCall__Outputs(this);
  }
}

export class SetAssetLabelCall__Inputs {
  _call: SetAssetLabelCall;

  constructor(call: SetAssetLabelCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetAssetLabelCall__Outputs {
  _call: SetAssetLabelCall;

  constructor(call: SetAssetLabelCall) {
    this._call = call;
  }
}

export class SwapEddyExactETHForTokensCall extends ethereum.Call {
  get inputs(): SwapEddyExactETHForTokensCall__Inputs {
    return new SwapEddyExactETHForTokensCall__Inputs(this);
  }

  get outputs(): SwapEddyExactETHForTokensCall__Outputs {
    return new SwapEddyExactETHForTokensCall__Outputs(this);
  }
}

export class SwapEddyExactETHForTokensCall__Inputs {
  _call: SwapEddyExactETHForTokensCall;

  constructor(call: SwapEddyExactETHForTokensCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapEddyExactETHForTokensCall__Outputs {
  _call: SwapEddyExactETHForTokensCall;

  constructor(call: SwapEddyExactETHForTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapEddyExactTokensForEthCall extends ethereum.Call {
  get inputs(): SwapEddyExactTokensForEthCall__Inputs {
    return new SwapEddyExactTokensForEthCall__Inputs(this);
  }

  get outputs(): SwapEddyExactTokensForEthCall__Outputs {
    return new SwapEddyExactTokensForEthCall__Outputs(this);
  }
}

export class SwapEddyExactTokensForEthCall__Inputs {
  _call: SwapEddyExactTokensForEthCall;

  constructor(call: SwapEddyExactTokensForEthCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapEddyExactTokensForEthCall__Outputs {
  _call: SwapEddyExactTokensForEthCall;

  constructor(call: SwapEddyExactTokensForEthCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapEddyTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapEddyTokensForTokensCall__Inputs {
    return new SwapEddyTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapEddyTokensForTokensCall__Outputs {
    return new SwapEddyTokensForTokensCall__Outputs(this);
  }
}

export class SwapEddyTokensForTokensCall__Inputs {
  _call: SwapEddyTokensForTokensCall;

  constructor(call: SwapEddyTokensForTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapEddyTokensForTokensCall__Outputs {
  _call: SwapEddyTokensForTokensCall;

  constructor(call: SwapEddyTokensForTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferERC20ToOwnerCall extends ethereum.Call {
  get inputs(): TransferERC20ToOwnerCall__Inputs {
    return new TransferERC20ToOwnerCall__Inputs(this);
  }

  get outputs(): TransferERC20ToOwnerCall__Outputs {
    return new TransferERC20ToOwnerCall__Outputs(this);
  }
}

export class TransferERC20ToOwnerCall__Inputs {
  _call: TransferERC20ToOwnerCall;

  constructor(call: TransferERC20ToOwnerCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferERC20ToOwnerCall__Outputs {
  _call: TransferERC20ToOwnerCall;

  constructor(call: TransferERC20ToOwnerCall) {
    this._call = call;
  }
}

export class TransferEthToOwnerCall extends ethereum.Call {
  get inputs(): TransferEthToOwnerCall__Inputs {
    return new TransferEthToOwnerCall__Inputs(this);
  }

  get outputs(): TransferEthToOwnerCall__Outputs {
    return new TransferEthToOwnerCall__Outputs(this);
  }
}

export class TransferEthToOwnerCall__Inputs {
  _call: TransferEthToOwnerCall;

  constructor(call: TransferEthToOwnerCall) {
    this._call = call;
  }
}

export class TransferEthToOwnerCall__Outputs {
  _call: TransferEthToOwnerCall;

  constructor(call: TransferEthToOwnerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeCall__Inputs {
    return new UpdatePlatformFeeCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeCall__Outputs {
    return new UpdatePlatformFeeCall__Outputs(this);
  }
}

export class UpdatePlatformFeeCall__Inputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }

  get _updatedFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePlatformFeeCall__Outputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }
}

export class WithdrawWETHCall extends ethereum.Call {
  get inputs(): WithdrawWETHCall__Inputs {
    return new WithdrawWETHCall__Inputs(this);
  }

  get outputs(): WithdrawWETHCall__Outputs {
    return new WithdrawWETHCall__Outputs(this);
  }
}

export class WithdrawWETHCall__Inputs {
  _call: WithdrawWETHCall;

  constructor(call: WithdrawWETHCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawWETHCall__Outputs {
  _call: WithdrawWETHCall;

  constructor(call: WithdrawWETHCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
